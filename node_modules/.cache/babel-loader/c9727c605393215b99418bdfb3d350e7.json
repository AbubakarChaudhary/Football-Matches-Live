{"ast":null,"code":"const findClosestPreviousMatch = _ref => {\n  let {\n    setLastHomeTeam,\n    setLastAwayTeam,\n    setLastMatchData\n  } = _ref;\n  const options = {\n    method: 'GET',\n    headers: {\n      'X-RapidAPI-Key': 'd2d4c9172dmshae6648fbf9221bap19e1e6jsnbf696dc1d585',\n      'X-RapidAPI-Host': 'sportscore1.p.rapidapi.com'\n    }\n  };\n  fetch('https://sportscore1.p.rapidapi.com/teams/145/events?page=1', options).then(response => {\n    response.json().then(res => {\n      var _fixture$home_team, _fixture$home_team2, _fixture$home_score, _fixture$away_team, _fixture$away_team2, _fixture$away_score, _fixture$league, _fixture$league2, _fixture$home_score2, _fixture$away_score2;\n\n      console.log(res.data[0]);\n      const fixtures = res.data;\n      const [fixture] = closestPreviousFixture(fixtures);\n      const updatedHomeTeam = {\n        id: fixture.home_team_id,\n        name: (_fixture$home_team = fixture.home_team) === null || _fixture$home_team === void 0 ? void 0 : _fixture$home_team.name,\n        logo: (_fixture$home_team2 = fixture.home_team) === null || _fixture$home_team2 === void 0 ? void 0 : _fixture$home_team2.logo,\n        currentScore: (_fixture$home_score = fixture.home_score) === null || _fixture$home_score === void 0 ? void 0 : _fixture$home_score.current\n      };\n      const updatedAwayTeam = {\n        id: fixture.away_team_id,\n        name: (_fixture$away_team = fixture.away_team) === null || _fixture$away_team === void 0 ? void 0 : _fixture$away_team.name,\n        logo: (_fixture$away_team2 = fixture.away_team) === null || _fixture$away_team2 === void 0 ? void 0 : _fixture$away_team2.logo,\n        currentScore: (_fixture$away_score = fixture.away_score) === null || _fixture$away_score === void 0 ? void 0 : _fixture$away_score.current\n      };\n      const updatedMatchData = {\n        status: fixture.status,\n        league: (_fixture$league = fixture.league) === null || _fixture$league === void 0 ? void 0 : _fixture$league.name,\n        logo: (_fixture$league2 = fixture.league) === null || _fixture$league2 === void 0 ? void 0 : _fixture$league2.logo,\n        result: ((_fixture$home_score2 = fixture.home_score) === null || _fixture$home_score2 === void 0 ? void 0 : _fixture$home_score2.current) + \"-\" + ((_fixture$away_score2 = fixture.away_score) === null || _fixture$away_score2 === void 0 ? void 0 : _fixture$away_score2.current) || null\n      };\n      setLastHomeTeam(team => ({ ...team,\n        ...updatedHomeTeam\n      }));\n      setLastAwayTeam(team => ({ ...team,\n        ...updatedAwayTeam\n      }));\n      setLastMatchData(lastMatchData => ({ ...lastMatchData,\n        ...updatedMatchData\n      }));\n      console.log(updatedHomeTeam);\n      console.log(updatedMatchData);\n    });\n  }).catch(err => console.error(err));\n};\n\nconst findClosestNextMatch = _ref2 => {\n  let {\n    setNextHomeTeam,\n    setNextAwayTeam,\n    setNextMatchData\n  } = _ref2;\n  const options = {\n    method: 'GET',\n    headers: {\n      'X-RapidAPI-Key': 'd2d4c9172dmshae6648fbf9221bap19e1e6jsnbf696dc1d585',\n      'X-RapidAPI-Host': 'sportscore1.p.rapidapi.com'\n    }\n  };\n  fetch('https://sportscore1.p.rapidapi.com/teams/145/events?page=1', options).then(response => {\n    response.json().then(res => {\n      var _fixture$home_team3, _fixture$home_team4, _fixture$home_score3, _fixture$away_team3, _fixture$away_team4, _fixture$away_score3, _fixture$league3, _fixture$league4, _fixture$home_score4, _fixture$away_score4;\n\n      console.log(res.data[0]);\n      const fixtures = res.data;\n      const [fixture] = closestNextFixture(fixtures);\n      const updatedHomeTeam = {\n        id: fixture.home_team_id,\n        name: (_fixture$home_team3 = fixture.home_team) === null || _fixture$home_team3 === void 0 ? void 0 : _fixture$home_team3.name,\n        logo: (_fixture$home_team4 = fixture.home_team) === null || _fixture$home_team4 === void 0 ? void 0 : _fixture$home_team4.logo,\n        currentScore: (_fixture$home_score3 = fixture.home_score) === null || _fixture$home_score3 === void 0 ? void 0 : _fixture$home_score3.current\n      };\n      const updatedAwayTeam = {\n        id: fixture.away_team_id,\n        name: (_fixture$away_team3 = fixture.away_team) === null || _fixture$away_team3 === void 0 ? void 0 : _fixture$away_team3.name,\n        logo: (_fixture$away_team4 = fixture.away_team) === null || _fixture$away_team4 === void 0 ? void 0 : _fixture$away_team4.logo,\n        currentScore: (_fixture$away_score3 = fixture.away_score) === null || _fixture$away_score3 === void 0 ? void 0 : _fixture$away_score3.current\n      };\n      const updatedMatchData = {\n        status: fixture.status,\n        league: (_fixture$league3 = fixture.league) === null || _fixture$league3 === void 0 ? void 0 : _fixture$league3.name,\n        logo: (_fixture$league4 = fixture.league) === null || _fixture$league4 === void 0 ? void 0 : _fixture$league4.logo,\n        result: ((_fixture$home_score4 = fixture.home_score) === null || _fixture$home_score4 === void 0 ? void 0 : _fixture$home_score4.current) + \"-\" + ((_fixture$away_score4 = fixture.away_score) === null || _fixture$away_score4 === void 0 ? void 0 : _fixture$away_score4.current) || null\n      };\n      setNextHomeTeam(team => ({ ...team,\n        ...updatedHomeTeam\n      }));\n      setNextAwayTeam(team => ({ ...team,\n        ...updatedAwayTeam\n      }));\n      setNextMatchData(nextMatchData => ({ ...nextMatchData,\n        ...updatedMatchData\n      }));\n      console.log(updatedHomeTeam);\n      console.log(updatedMatchData);\n    });\n  }).catch(err => console.error(err));\n};\n\nconst closestNextFixture = fixtures => {\n  const now = new Date();\n  let closestDate = Infinity;\n  let closestFixture;\n  fixtures.forEach(fixture => {\n    const fixtureDate = new Date(fixture.start_at);\n\n    if (fixtureDate >= now && fixtureDate < closestDate) {\n      closestDate = fixtureDate;\n      closestFixture = fixture;\n    }\n  });\n  console.log(\"closestDate: \", closestDate);\n  console.log(\"closestFixture: \", closestFixture);\n  return [closestFixture];\n};\n\nconst closestPreviousFixture = fixtures => {\n  const now = new Date();\n  let closestDate = -Infinity;\n  let closestFixture;\n  fixtures.forEach(fixture => {\n    const fixtureDate = new Date(fixture.start_at);\n\n    if (fixtureDate < now && fixtureDate >= closestDate) {\n      closestDate = fixtureDate;\n      closestFixture = fixture;\n    }\n  });\n  console.log(\"closestDate: \", closestDate);\n  console.log(\"closestFixture: \", closestFixture);\n  return [closestFixture];\n};\n\nexport { findClosestPreviousMatch, findClosestNextMatch };","map":{"version":3,"sources":["D:/Football live score/live-score/src/LiveScore/matchFinders.js"],"names":["findClosestPreviousMatch","setLastHomeTeam","setLastAwayTeam","setLastMatchData","options","method","headers","fetch","then","response","json","res","console","log","data","fixtures","fixture","closestPreviousFixture","updatedHomeTeam","id","home_team_id","name","home_team","logo","currentScore","home_score","current","updatedAwayTeam","away_team_id","away_team","away_score","updatedMatchData","status","league","result","team","lastMatchData","catch","err","error","findClosestNextMatch","setNextHomeTeam","setNextAwayTeam","setNextMatchData","closestNextFixture","nextMatchData","now","Date","closestDate","Infinity","closestFixture","forEach","fixtureDate","start_at"],"mappings":"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","sourcesContent":["const findClosestPreviousMatch = ({\r\n  setLastHomeTeam,\r\n  setLastAwayTeam,\r\n  setLastMatchData,\r\n}) => {\r\n  const options = {\r\n    method: 'GET',\r\n    headers: {\r\n      'X-RapidAPI-Key': 'd2d4c9172dmshae6648fbf9221bap19e1e6jsnbf696dc1d585',\r\n      'X-RapidAPI-Host': 'sportscore1.p.rapidapi.com'\r\n    }\r\n  };\r\n\r\n  fetch('https://sportscore1.p.rapidapi.com/teams/145/events?page=1', options)\r\n    .then(response => {\r\n      response.json()\r\n        .then(res => {\r\n          console.log(res.data[0]);\r\n          const fixtures = res.data;\r\n          const [fixture] = closestPreviousFixture(fixtures);\r\n\r\n          const updatedHomeTeam = {\r\n            id: fixture.home_team_id,\r\n            name: fixture.home_team?.name,\r\n            logo: fixture.home_team?.logo,\r\n            currentScore: fixture.home_score?.current,\r\n          }\r\n          const updatedAwayTeam = {\r\n            id: fixture.away_team_id,\r\n            name: fixture.away_team?.name,\r\n            logo: fixture.away_team?.logo,\r\n            currentScore: fixture.away_score?.current,\r\n          }\r\n\r\n          const updatedMatchData = {\r\n            status: fixture.status,\r\n            league: fixture.league?.name,\r\n            logo: fixture.league?.logo,\r\n            result: fixture.home_score?.current + \"-\" + fixture.away_score?.current || null,\r\n          }\r\n\r\n          setLastHomeTeam(team => ({\r\n            ...team,\r\n            ...updatedHomeTeam,\r\n          }));\r\n          setLastAwayTeam(team => ({\r\n            ...team,\r\n            ...updatedAwayTeam,\r\n          }));\r\n          setLastMatchData(lastMatchData => ({\r\n            ...lastMatchData,\r\n            ...updatedMatchData,\r\n          }));\r\n\r\n          console.log(updatedHomeTeam);\r\n          console.log(updatedMatchData);\r\n        })\r\n    })\r\n    .catch(err => console.error(err));\r\n}\r\n\r\nconst findClosestNextMatch = ({\r\n  setNextHomeTeam,\r\n  setNextAwayTeam,\r\n  setNextMatchData\r\n}) => {\r\n  const options = {\r\n    method: 'GET',\r\n    headers: {\r\n      'X-RapidAPI-Key': 'd2d4c9172dmshae6648fbf9221bap19e1e6jsnbf696dc1d585',\r\n      'X-RapidAPI-Host': 'sportscore1.p.rapidapi.com'\r\n    }\r\n  };\r\n\r\n  fetch('https://sportscore1.p.rapidapi.com/teams/145/events?page=1', options)\r\n    .then(response => {\r\n      response.json()\r\n        .then(res => {\r\n          console.log(res.data[0]);\r\n          const fixtures = res.data;\r\n          const [fixture] = closestNextFixture(fixtures);\r\n\r\n          const updatedHomeTeam = {\r\n            id: fixture.home_team_id,\r\n            name: fixture.home_team?.name,\r\n            logo: fixture.home_team?.logo,\r\n            currentScore: fixture.home_score?.current,\r\n          }\r\n          const updatedAwayTeam = {\r\n            id: fixture.away_team_id,\r\n            name: fixture.away_team?.name,\r\n            logo: fixture.away_team?.logo,\r\n            currentScore: fixture.away_score?.current,\r\n          }\r\n\r\n          const updatedMatchData = {\r\n            status: fixture.status,\r\n            league: fixture.league?.name,\r\n            logo: fixture.league?.logo,\r\n            result: fixture.home_score?.current + \"-\" + fixture.away_score?.current || null,\r\n          }\r\n\r\n          setNextHomeTeam(team => ({\r\n            ...team,\r\n            ...updatedHomeTeam,\r\n          }));\r\n          setNextAwayTeam(team => ({\r\n            ...team,\r\n            ...updatedAwayTeam,\r\n          }));\r\n          setNextMatchData(nextMatchData => ({\r\n            ...nextMatchData,\r\n            ...updatedMatchData,\r\n          }));\r\n\r\n          console.log(updatedHomeTeam);\r\n          console.log(updatedMatchData);\r\n        })\r\n    })\r\n    .catch(err => console.error(err));\r\n}\r\n\r\nconst closestNextFixture = fixtures => {\r\n  const now = new Date();\r\n  let closestDate = Infinity;\r\n  let closestFixture;\r\n  fixtures.forEach(fixture => {\r\n    const fixtureDate = new Date(fixture.start_at)\r\n    if (fixtureDate >= now && fixtureDate < closestDate) {\r\n      closestDate = fixtureDate;\r\n      closestFixture = fixture;\r\n    }\r\n  });\r\n  console.log(\"closestDate: \", closestDate);\r\n  console.log(\"closestFixture: \", closestFixture);\r\n  return [closestFixture];\r\n\r\n}\r\n\r\nconst closestPreviousFixture = fixtures => {\r\n  const now = new Date();\r\n  let closestDate = -Infinity;\r\n  let closestFixture;\r\n  fixtures.forEach(fixture => {\r\n    const fixtureDate = new Date(fixture.start_at)\r\n    if (fixtureDate < now && fixtureDate >= closestDate) {\r\n      closestDate = fixtureDate;\r\n      closestFixture = fixture;\r\n    }\r\n  });\r\n  console.log(\"closestDate: \", closestDate);\r\n  console.log(\"closestFixture: \", closestFixture);\r\n  return [closestFixture];\r\n}\r\n\r\nexport { findClosestPreviousMatch, findClosestNextMatch };"]},"metadata":{},"sourceType":"module"}